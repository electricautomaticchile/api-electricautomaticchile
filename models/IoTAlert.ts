import mongoose, { Schema, Document } from "mongoose";

export interface IIoTAlert extends Document {
  id: string;
  type: "error" | "warning" | "info" | "success";
  severity: "low" | "medium" | "high" | "critical";
  title: string;
  message: string;
  deviceId: mongoose.Types.ObjectId;
  timestamp: Date;

  // Campos de permisos y visibilidad
  visibleToRoles: string[];
  assignedUsers: mongoose.Types.ObjectId[];
  autoGenerated: boolean;
  acknowledged: boolean;
  acknowledgedBy?: mongoose.Types.ObjectId;
  acknowledgedAt?: Date;

  // Metadatos adicionales
  source: string; // Origen de la alerta (IoT Monitor, Voltage Detector, etc.)
  category: string; // Categoría de la alerta
  priority: number; // Prioridad numérica para ordenamiento

  // Datos específicos de la alerta
  alertData?: {
    currentValue?: number;
    expectedValue?: number;
    threshold?: number;
    unit?: string;
    deviation?: number;
  };

  // Resolución
  resolved: boolean;
  resolvedBy?: mongoose.Types.ObjectId;
  resolvedAt?: Date;
  resolutionNotes?: string;

  // Notificaciones
  notificationsSent: {
    email: boolean;
    websocket: boolean;
    sms: boolean;
  };

  // Metadatos
  metadata?: Record<string, any>;
}

const IoTAlertSchema = new Schema<IIoTAlert>(
  {
    type: {
      type: String,
      enum: ["error", "warning", "info", "success"],
      required: true,
      index: true,
    },
    severity: {
      type: String,
      enum: ["low", "medium", "high", "critical"],
      required: true,
      index: true,
    },
    title: {
      type: String,
      required: true,
      maxlength: 200,
    },
    message: {
      type: String,
      required: true,
      maxlength: 1000,
    },
    deviceId: {
      type: Schema.Types.ObjectId,
      ref: "Dispositivo",
      required: true,
      index: true,
    },
    timestamp: {
      type: Date,
      default: Date.now,
      index: true,
    },

    // Permisos y visibilidad
    visibleToRoles: {
      type: [String],
      enum: ["superadmin", "empresa", "cliente"],
      default: ["superadmin"],
      index: true,
    },
    assignedUsers: [
      {
        type: Schema.Types.ObjectId,
        refPath: "visibleToRoles",
      },
    ],
    autoGenerated: {
      type: Boolean,
      default: false,
      index: true,
    },
    acknowledged: {
      type: Boolean,
      default: false,
      index: true,
    },
    acknowledgedBy: {
      type: Schema.Types.ObjectId,
      refPath: "visibleToRoles",
    },
    acknowledgedAt: Date,

    // Metadatos
    source: {
      type: String,
      required: true,
      maxlength: 100,
    },
    category: {
      type: String,
      enum: [
        "connection",
        "voltage",
        "current",
        "power",
        "temperature",
        "hardware",
        "system",
        "security",
        "maintenance",
      ],
      default: "system",
      index: true,
    },
    priority: {
      type: Number,
      min: 1,
      max: 10,
      default: 5,
      index: true,
    },

    // Datos específicos
    alertData: {
      currentValue: Number,
      expectedValue: Number,
      threshold: Number,
      unit: String,
      deviation: Number,
    },

    // Resolución
    resolved: {
      type: Boolean,
      default: false,
      index: true,
    },
    resolvedBy: {
      type: Schema.Types.ObjectId,
      refPath: "visibleToRoles",
    },
    resolvedAt: Date,
    resolutionNotes: {
      type: String,
      maxlength: 500,
    },

    // Notificaciones
    notificationsSent: {
      email: { type: Boolean, default: false },
      websocket: { type: Boolean, default: false },
      sms: { type: Boolean, default: false },
    },

    // Metadatos adicionales
    metadata: {
      type: Map,
      of: Schema.Types.Mixed,
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

// Índices compuestos para consultas eficientes
IoTAlertSchema.index({ deviceId: 1, timestamp: -1 });
IoTAlertSchema.index({ severity: 1, acknowledged: 1 });
IoTAlertSchema.index({ visibleToRoles: 1, timestamp: -1 });
IoTAlertSchema.index({ assignedUsers: 1, resolved: 1 });
IoTAlertSchema.index({ category: 1, severity: 1 });
IoTAlertSchema.index({ autoGenerated: 1, timestamp: -1 });

// Índice TTL para auto-eliminar alertas antiguas (opcional)
IoTAlertSchema.index(
  { timestamp: 1 },
  { expireAfterSeconds: 60 * 60 * 24 * 90 }
); // 90 días

// Métodos estáticos
IoTAlertSchema.statics.getAlertsByUser = async function (
  userId: string,
  userRole: string,
  filters: any = {}
) {
  const matchStage: any = {
    $or: [{ visibleToRoles: userRole }, { assignedUsers: userId }],
    ...filters,
  };

  return this.find(matchStage)
    .populate("deviceId", "nombre idDispositivo cliente")
    .sort({ timestamp: -1 });
};

IoTAlertSchema.statics.getCriticalAlerts = async function () {
  return this.find({
    severity: "critical",
    resolved: false,
    acknowledged: false,
  })
    .populate("deviceId", "nombre idDispositivo cliente")
    .sort({ timestamp: -1 });
};

IoTAlertSchema.statics.getAlertStatistics = async function (
  userId?: string,
  userRole?: string
) {
  const matchStage: any = {};

  if (userId && userRole) {
    matchStage.$or = [{ visibleToRoles: userRole }, { assignedUsers: userId }];
  }

  return this.aggregate([
    { $match: matchStage },
    {
      $group: {
        _id: null,
        total: { $sum: 1 },
        critical: {
          $sum: { $cond: [{ $eq: ["$severity", "critical"] }, 1, 0] },
        },
        high: { $sum: { $cond: [{ $eq: ["$severity", "high"] }, 1, 0] } },
        medium: { $sum: { $cond: [{ $eq: ["$severity", "medium"] }, 1, 0] } },
        low: { $sum: { $cond: [{ $eq: ["$severity", "low"] }, 1, 0] } },
        unacknowledged: {
          $sum: { $cond: [{ $eq: ["$acknowledged", false] }, 1, 0] },
        },
        unresolved: { $sum: { $cond: [{ $eq: ["$resolved", false] }, 1, 0] } },
      },
    },
  ]);
};

// Métodos de instancia
IoTAlertSchema.methods.acknowledge = async function (userId: string) {
  this.acknowledged = true;
  this.acknowledgedBy = userId;
  this.acknowledgedAt = new Date();
  return this.save();
};

IoTAlertSchema.methods.resolve = async function (
  userId: string,
  notes?: string
) {
  this.resolved = true;
  this.resolvedBy = userId;
  this.resolvedAt = new Date();
  if (notes) {
    this.resolutionNotes = notes;
  }
  return this.save();
};

IoTAlertSchema.methods.canBeViewedBy = function (
  userId: string,
  userRole: string
): boolean {
  return (
    this.visibleToRoles.includes(userRole) ||
    this.assignedUsers.some((id: any) => id.toString() === userId)
  );
};

const IoTAlert = mongoose.model<IIoTAlert>("IoTAlert", IoTAlertSchema);

export default IoTAlert;
